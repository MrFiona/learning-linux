1、大小写转换
l_name=`echo $1 | tr [a-z] [A-Z]`
解释：将输入的命令行参数里的小写字母转换为大写字母

2、参数长度为空（未输入参数）
DTA=$1
if [ -z DTA ]    
then 
       DTA=`pwd`
       DTA=`basename $DTA`    //basename 将路径去掉，只取出文件名
fi
解释：当参数为空时，指定一个参数，basename去掉文件名的路径部分

3、substr取某些字节
ls -l | awk '{printf substr($9,3)}'
解释：取ls -l 结果的第九个域，并且从第九个域的第三个字节开始显示

4、if 条件的合并
if [$choice = "Yes" -o $choice = "yes" -o $choice = "y" -o $choice = "Y" ]
或者这样
if [ $choice = "Yes" ]  || [ $choice = "yes" ] || [ $choice = "y" ] || [ $choice = "Y" ] 
解释：使用-o来连接条件或者用|| 也可以，两者是等价的

5、几个常见的shell常识
$* 将所有的参数视为一个参数
$@ 分别对待每一个参数
$? 上一次命令执行的状态值 1~255之间
$0 文件名（当前打开的文件路径+文件名）
${!#} 最后一个命令行的参数值
$# 命令行参数的个数

6、if 条件参数
if [ $m1 = 3 -a $m2 = 4 ]  表示当m1和m2条件同时成立才为真
if [ $m1 = 3 -o $m2 = 4 ]  表示当m1和m2条件有一个成立就为真
解释：-a相当于“且”的关系，-o相当于“或”的关系
或者这样写：if [ $m1 = 3 ] -a [ $m2 = 4 ]也是对的

7、字符串前加x
if [ "x$ID" = "xAIX" ]
解释：当字符串为空值，或者开头带有一个减号时，test 命令就会被混淆，在字符串前置x（x使用是随意的，但这是传统用法）
实际上，将所有参数以引号括起来的算法仅适用于test，这种做法就算第一个参数开头为减号也不会有问题，但是如果可移植性
远比可读性重要，还是最好加x为好

8、if条件！
if [ ! -f $file -o ! -x $file ]
解释：表示当file不是文件或者file不可以执行时输出为真，否则为假

9、sed 
ex1: sed -n 's/ab/cd/g' $1 >> $1
ex2:  m=ab n=cd
sed -n "s/$m/$n/g" $1 >> $1 
注意：第二种情况要加双引号不能用单引号，第一种情况则单引号、双引号都可以